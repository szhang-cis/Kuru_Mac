      SUBROUTINE FIXITY(IFFIX,LNODS,PRESC,PRESH,ELDAT,MATNO,PROEL,
     .                  INFRI,COFRI,ISKPO,WORK1)
C***********************************************************************
C
C**** THIS ROUTINE READS AND SETS DATA FOR FIXITY CONDITIONS
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      INCLUDE 'auxl_om.f'
      INCLUDE 'prob_om.f'
      INCLUDE 'inpo_om.f'
C
      COMMON/LDFILE/ITAPE
C
      DIMENSION IFFIX(NTOTV,*), LNODS(NNODE,*), PRESC(NTOTV,*),
     .          PRESH(*)
      DIMENSION ELDAT(*),       MATNO(*),       PROEL(*),
     .          WORK1(*)
      DIMENSION INFRI(NPOIN),   COFRI(NSKEW,NDIME,*)
      DIMENSION ORIGI(3),       ZLOCA(3),       XLOCA(3)
      DIMENSION ISKPO(*)
C
      IERR1=1
      IF(ITAPE.NE.LUDAT) THEN
       ITAPE=LUFIX       ! external .fix file
       IF(IOFIX.EQ.0) OPEN(UNIT=LUFIX,FILE=CF1,STATUS='OLD',ERR=1000)
       IOFIX=1
       IERR1=0
C
 1000  IF(IERR1.NE.0) THEN
        IF(IERR1.EQ.1) WRITE(LURES,901)
        CALL RUNEND('ERROR IN OPENING FILE ')
       ENDIF
      ENDIF         ! itape.ne.ludat
C
C**** INITIALISE FIXITY ARRAY
C
      IF(NSKEW.EQ.0) THEN
       WRITE(LURES,900)
      ELSE
       WRITE(LURES,902)
      ENDIF
C
      DO 10 ITOTV=1,NTOTV
   10 IFFIX(ITOTV,1)=0
C
C**** INFRI & COFRI: VARIABLES FOR SKEW SYSTEMS
C
      IF(NSKEW.GT.0) THEN
       DO IPOIN=1,NPOIN
        INFRI(IPOIN)=0
       ENDDO
       DO ISKEW=1,NSKEW
        DO IDOFC=1,NDOFC
         DO JDOFC=1,NDOFC
          COFRI(ISKEW,IDOFC,JDOFC)=0.0
         ENDDO
        ENDDO
       ENDDO
      ENDIF
C
C**** COMPUTES NUMBER OF POINTS WITHOUT CONTACT (AL METHOD)
C
      NPOI1=NPOIN-NPOIC
      NTOT1=NPOI1*NDOFC
C
      IF(NPOIC.GT.0) THEN
       IF(IAUGM.EQ.0) THEN
        IF(NNODC.NE.0) THEN            ! only contact problems
         DO IPOIN=NPOI1+1,NPOIN
          DO IDOFC=1,NDOFC
           ITOTV=(IPOIN-1)*NDOFC+IDOFC
           IF(IDOFC.NE.1) THEN
            IFFIX(ITOTV,1)=1
            PRESC(ITOTV,1)=0.0
            PRESC(ITOTV,2)=1.0
           ENDIF
          ENDDO
         ENDDO
        ENDIF
       ENDIF
       IF(IAUGM.EQ.2.OR.IAUGM.EQ.3) THEN
c       DO ITOTV=NTOT1+1,NTOTV          ! to be revised
c        IFFIX(ITOTV,1)=1
c       ENDDO
       ENDIF
      ENDIF
C
C**** ACTIVATE  D.O.F. FOR SHELL ELEMENTS
C
      IF(KPROB.EQ.2) CALL FIXELM(LNODS,ELDAT,MATNO,PROEL,IFFIX,WORK1)
C
      IF(KSMUS.NE.0) THEN
       DO 12 ITOTV=1,NTOTV
   12  IFFIX(ITOTV,2)=0
       DO 15 IPOIN=1,NPOIN
       ITOTV=IPOIN*NDOFC
   15  IFFIX(ITOTV,2)=1
      ENDIF
C
C**** READS LOCAL COORDINATE SYSTEMS
C
C     Note: U_local = R * U_global
C
C           = > K_local = R * K_global * R^T
C               F_local = R * F_global
C
      IF(NSKEW.GT.0) THEN
       DO ISKEW=1,NSKEW
        ISKPO(ISKEW)=0
       ENDDO
C
       NPRIN=1
       DO ISKEW=1,NSKEW
        CALL LISTEN('FIXITY',NPRIN,ITAPE)
        IF(WORDS(1).EQ.'LOCAL') THEN
         JSKE1=DINT(PARAM(1))
         IF(JSKE1.LE.0.OR.JSKE1.GT.NSKEW)
     .    CALL RUNEND('ERROR: WRONG INPUT DATA IN LOCAL COORD. SYST.')
         ISKPO(JSKE1)=JSKE1
C
         JSKE2=0
         IF(WORDS(2).EQ.'OPTIO') THEN
          IF(WORDS(3).EQ.'OXL  ') THEN    ! origin & x_l
           IF(NDIME.EQ.3)
     .      CALL RUNEND('ERROR: WRONG OPTION FOR LOCAL SYST.')
           JSKE2=1
           JSKE3=1
           CALL LISTEN('FIXITY',NPRIN,ITAPE)
           DO IDIME=1,NDIME
            ORIGI(IDIME)=PARAM(IDIME)
            ZLOCA(IDIME)=0.0
            XLOCA(IDIME)=PARAM(IDIME+NDIME)
           ENDDO
           CALL SKEWS1(JSKE1,ORIGI,ZLOCA,XLOCA,COFRI)
          ENDIF
          IF(WORDS(3).EQ.'OZLXL') THEN    ! origin, z_l & x_l
           IF(NDIME.NE.3)
     .      CALL RUNEND('ERROR: WRONG OPTION FOR LOCAL SYST.')
           JSKE2=1
           JSKE3=1
           CALL LISTEN('FIXITY',NPRIN,ITAPE)
           DO IDIME=1,NDIME
            ORIGI(IDIME)=PARAM(IDIME)
            ZLOCA(IDIME)=PARAM(IDIME+NDIME)
            XLOCA(IDIME)=PARAM(IDIME+2*NDIME)
           ENDDO
           CALL SKEWS1(JSKE1,ORIGI,ZLOCA,XLOCA,COFRI)
          ENDIF
          IF(WORDS(3).EQ.'EULER') THEN    ! origin & Euler angles
           CALL RUNEND('ERROR: EULER ANGLES NOT IMPLEMENTED')
           JSKE2=1
           JSKE3=2
          ENDIF
          IF(WORDS(3).EQ.'ROTAT') THEN    ! transpose of rotation matrix
           JSKE2=1
           JSKE3=3
           DO IDIME=1,NDIME
            CALL LISTEN('FIXITY',NPRIN,ITAPE)
            DO JDIME=1,NDIME
             COFRI(JSKE1,JDIME,IDIME)=PARAM(JDIME)     ! rotation matrix
            ENDDO
           ENDDO
          ENDIF
         ELSE
          JSKE2=1                         ! standard definition of R
          JSKE3=3                         ! not used
          DO IDIME=1,NDIME
           CALL LISTEN('FIXITY',NPRIN,ITAPE)
           DO JDIME=1,NDIME
            COFRI(JSKE1,IDIME,JDIME)=PARAM(JDIME)      ! rotation matrix
           ENDDO
          ENDDO
         ENDIF
        ELSE
         CALL RUNEND('ERROR: WRONG INPUT DATA IN LOCAL COORD. SYST.')
        ENDIF
        IF(JSKE2.EQ.0)
     .   CALL RUNEND('ERROR: WRONG INPUT DATA IN LOCAL COORD. SYST.')
       ENDDO
C
C**** CONTROLS REPETITION OF LOCAL SYSTEMS
C
       DO ISKEW=1,NSKEW
        IF(ISKPO(ISKEW).EQ.0)
     .   CALL RUNEND('ERROR: WRONG INPUT DATA IN LOCAL COORD. SYST.')
       ENDDO
      ENDIF
C
C**** READS THE FIXITY CONDITIONS AND PRESCRIBED VALUES
C
   20 NPRIN=1
      CALL LISTEN('FIXITY',NPRIN,ITAPE)
      NOFIX=DINT(PARAM(1))
      IFPRE=DINT(PARAM(2))
      IFUNC=DINT(PARAM(3))
      IF(NOFIX.LE.0.OR.NOFIX.GT.NPOI1)
     . CALL RUNEND('ERROR: WRONG NUMBER OF PRESCRIBED NODE')
      DO IDOFN=1,NDOFN
       PRESH(IDOFN)=PARAM(IDOFN+3)
      ENDDO
C
      IF(NSKEW.GT.0) THEN
       INFRI(NOFIX)=DINT(PARAM(3+NDOFN+1))
      ENDIF
C
      IF(NSKEW.EQ.0) THEN
       WRITE(LURES,922) NOFIX,IFPRE,IFUNC,
     .                 (PRESH(IDOFN),IDOFN=1,NDOFC)
      ELSE
       IF(NDIME.EQ.1) THEN
        WRITE(LURES,923) NOFIX,IFPRE,IFUNC,
     .                  (PRESH(IDOFN),IDOFN=1,NDOFC),INFRI(NOFIX)
       ENDIF
       IF(NDIME.EQ.2) THEN
        WRITE(LURES,924) NOFIX,IFPRE,IFUNC,
     .                  (PRESH(IDOFN),IDOFN=1,NDOFC),INFRI(NOFIX)
       ENDIF
       IF(NDIME.EQ.3) THEN
        WRITE(LURES,925) NOFIX,IFPRE,IFUNC,
     .                  (PRESH(IDOFN),IDOFN=1,NDOFC),INFRI(NOFIX)
       ENDIF
      ENDIF
C
      NLOCA=(NOFIX-1)*NDOFC
      IFDOC=10**(NDOFC-1)
C
      DO 30 IDOFC=1,NDOFC
      ITOTV=NLOCA+IDOFC
      IF(IFPRE.LT.IFDOC) GOTO 30
      IFFIX(ITOTV,1)=1
      IF(KSMUS.NE.0) IFFIX(ITOTV,2)=1
      PRESC(ITOTV,1)=PRESH(IDOFC)
      PRESC(ITOTV,2)=IFUNC
      IFPRE=IFPRE-IFDOC
   30 IFDOC=IFDOC/10
C
      IF(NOFIX.LT.NPOI1) GOTO 20
C
C**** WRITES ROTATION MATRICES WHEN USING LOCAL COORDINATES SYSTEMS
C
      IF(NSKEW.GT.0) THEN
       WRITE(LURES,940)
       DO ISKEW=1,NSKEW
        WRITE(LURES,941) ISKEW
        IF(NDIME.EQ.1) THEN
         WRITE(LURES,942) ((COFRI(ISKEW,IDIME,JDIME), JDIME=1,NDIME),
     .                                                IDIME=1,NDIME)
        ENDIF
        IF(NDIME.EQ.2) THEN
         WRITE(LURES,943) ((COFRI(ISKEW,IDIME,JDIME), JDIME=1,NDIME),
     .                                                IDIME=1,NDIME)
        ENDIF
        IF(NDIME.EQ.3) THEN
         WRITE(LURES,944) ((COFRI(ISKEW,IDIME,JDIME), JDIME=1,NDIME),
     .                                                IDIME=1,NDIME)
        ENDIF
       ENDDO
      ENDIF
C
C**** STORES DEFINED BOUNDARY CONDITIONS WHEN ACTIVE ELEMENTS ARE USED
C
      IF(NACTI.EQ.1) THEN
       DO ITOTV=1,NTOTV
        IF(KSMUS.EQ.0) THEN
         IFFIX(ITOTV,2)=IFFIX(ITOTV,1)
        ELSE
         IFFIX(ITOTV,3)=IFFIX(ITOTV,1)
         IFFIX(ITOTV,4)=IFFIX(ITOTV,2)
        ENDIF
       ENDDO
      ENDIF
C
      WRITE(LURES,926)
C
      RETURN
  900 FORMAT(//10X,5H NODE,10X,5H CODE,7X,8HFUNCTION,5X,12HFIXED VALUES)
  901 FORMAT(' ERROR IN OPENING BOUNDARY CONDITIONS INPUT  FILE  45 ')
  902 FORMAT(//10X,5H NODE,10X,5H CODE,7X,8HFUNCTION,5X,12HFIXED VALUES,
     .30X,17HCOORDINATE SYSTEM)
c 910 FORMAT(2I5,2F10.6,I5,4F10.6)
c 911 FORMAT(2I5,3F10.6,I5,9F10.6)
c 915 FORMAT(I5,I10,10F10.6)
c 920 FORMAT(2(5X,I10),5X,2E10.3,5X,I5,5X,410E10.3)
c 921 FORMAT(2(5X,I10),5X,3E10.3,5X,I5,5X,910E10.3)
  922 FORMAT(3(5X,I10),3(5X,E10.3))
  923 FORMAT(3(5X,I10),1(5X,E10.3),25X,I5)
  924 FORMAT(3(5X,I10),2(5X,E10.3),15X,I5)
  925 FORMAT(3(5X,I10),3(5X,E10.3), 5X,I5)
  926 FORMAT(/)
c 930 FORMAT(I5,I5,3F10.6)
c 931 FORMAT(2(5X,I10),5X,3E10.3)
  940 FORMAT(//,10X,'LOCAL COORDINATE SYSTEMS')
  941 FORMAT(/,'LOCAL COORDINATE SYSTEM=',I5)
  942 FORMAT('ROTATION MATRIX (U_l = R * U_g)',/,E10.3)
  943 FORMAT('ROTATION MATRIX (U_l = R * U_g)',/,2E10.3,/,2E10.3)
  944 FORMAT('ROTATION MATRIX (U_l = R * U_g)',/,3E10.3,/,3E10.3,/,
     .                                           3E10.3)
      END

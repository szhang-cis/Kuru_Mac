      SUBROUTINE PLOCAU(IGAUS,CARTD,ELDIS,STRSG,XJACM,XJACI,
     .                  POSGP,WEIGP,DERIV,SHAPE,ELCOD,GPCOD)
C***********************************************************************
C
C**** THIS ROUTINE COMPUTE THE CAUCHY STRESS FROM THE SECOND PIOLA
C     KIRCHHOFF STRESS
C     (FOR A GIVEN ELEMENT AND GAUSS POINT)
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      INCLUDE 'prob_om.f'
      INCLUDE 'inte_om.f'
      INCLUDE 'auxl_om.f'
C
      DIMENSION CARTD(NDIME,NNODE,*), ELDIS(NDOFC,*)
      DIMENSION STRSG(NSTR1,*),       XJACM(NDIME,*), XJACI(NDIME,*)
      DIMENSION SIGMA(3,3),           AUXIL(3,3)
      DIMENSION POSGP(NDIME,*),       WEIGP(*),
     .          DERIV(NDIME,NNODE,*), SHAPE(NNODE,*),
     .          ELCOD(NDIME,*),       GPCOD(NDIME,*)
C
      NQUTR=1      ! to be revised !!
C
C**** IDENTIFY SAMPLING POINTS AND WEIGHTS
C
      CALL RULEPW(NDIME,NGAUL,NRULE,POSGP,WEIGP)
C
C**** COMPUTE SHAPE FUNCTIONS AND DERIVATIVES
C
      EXISP=POSGP(1,IGAUS)
      ETASP=0.0D0
      IF(NDIME.GE.2) ETASP=POSGP(2,IGAUS)
      EZETA=0.0D0
      IF(NDIME.EQ.3) EZETA=POSGP(3,IGAUS)
      CALL SHAFUN(DERIV(1,1,IGAUS),EXISP,ETASP,EZETA,NDIME,NNODS,
     .            NQUTR,    0,SHAPE(1,IGAUS))
C
C**** CARTESIAN DERIVATIVES
C
      CALL JACOBS(CARTD(1,1,IGAUS), DERIV(1,1,IGAUS), DETJM,
     .            ELCOD,            GPCOD(1,IGAUS),   IELEM,
     .            NDIME,NNODS,      SHAPE(1,IGAUS),   XJACM,
     .            LURES,LUPRI)
C
C**** UPDATES GEOMETRY FOR LARGE DISPLACEMENTS
C
      DO IDIME=1,NDIME
       DO INODE=1,NNODL
        ELDIS(IDIME,INODE)=ELCOD(IDIME,INODE)+ELDIS(IDIME,INODE)
       END DO
      ENDDO
C
C**** CALCULATE THE JACOBIAN MATRIX
C
      CALL PROMA2(XJACM,ELDIS,CARTD(1,1,IGAUS),NDIME,NNODE)
C
C**** CALCULATE THE DETERMINANT AND INVERS OF JACOBIAN MATRIX
C
      CALL INVMTX(XJACM,XJACI,DETJM,NDIME)
C
      IF(NTYPE.EQ.3) THEN
       GPCOI=0.0
       DO INODE=1,NNODE
        GPCOI=GPCOI+ELDIS(1,INODE)*SHAPE(INODE,IGAUS)
       ENDDO
       DETJM=DETJM*GPCOI/GPCOD(1,IGAUS)
       XJA3M=GPCOI/GPCOD(1,IGAUS)
      ENDIF
C
C**** BUILD STRESS TENSOR
C
      SIGMA(1,1)=STRSG(1,IGAUS)
      IF(NTYPE.EQ.4)THEN
       SIGMA(1,2)=STRSG(3,IGAUS)
       SIGMA(1,3)=STRSG(5,IGAUS)
       SIGMA(2,2)=STRSG(2,IGAUS)
       SIGMA(2,3)=STRSG(6,IGAUS)
       SIGMA(3,3)=STRSG(4,IGAUS)
      ELSE IF(NTYPE.NE.5) THEN
       SIGMA(1,2)=STRSG(3,IGAUS)
       SIGMA(2,2)=STRSG(2,IGAUS)
       IF(NTYPE.NE.1) SIGMA(3,3)=STRSG(4,IGAUS)
      ENDIF
      DO 60  I=1,NDIME
      DO 60  J=I,NDIME
   60 SIGMA(J,I)=SIGMA(I,J)
C                           *               t
C**** COMPUTE CAUCHY STRESS: S = 1/J ( F:S:F )
C
      DO 70 I=1,NDIME
      DO 70 J=1,NDIME
      AUXIL(I,J)=0.D0
      DO 70 K=1,NDIME
      DO 70 L=1,NDIME
   70 AUXIL(I,J)=AUXIL(I,J)+XJACM(I,K)*SIGMA(K,L)*XJACM(J,L)
      DO 80 I=1,NDIME
      DO 80 J=1,NDIME
   80 SIGMA(I,J)=AUXIL(I,J)  
      IF(NTYPE.EQ.3) SIGMA(3,3)=XJA3M*SIGMA(3,3)*XJA3M
C
      STRSG(1,IGAUS)=SIGMA(1,1)/DETJM
      IF(NTYPE.EQ.4)THEN
       STRSG(3,IGAUS)=SIGMA(1,2)/DETJM
       STRSG(5,IGAUS)=SIGMA(1,3)/DETJM
       STRSG(2,IGAUS)=SIGMA(2,2)/DETJM
       STRSG(6,IGAUS)=SIGMA(2,3)/DETJM
       STRSG(4,IGAUS)=SIGMA(3,3)/DETJM
      ELSE IF(NTYPE.NE.5) THEN
       STRSG(3,IGAUS)=SIGMA(1,2)/DETJM
       STRSG(2,IGAUS)=SIGMA(2,2)/DETJM
       IF(NTYPE.NE.1) STRSG(4,IGAUS)=SIGMA(3,3)/DETJM
      ENDIF
C
      RETURN
      END

import numpy as np

def PentBases(C,e1,e2):
    """Simple p=1 pentagonal bases taken from:
        https://onlinelibrary.wiley.com/doi/abs/10.1002/nme.5730

        The parametric domain is:


            (0,0) -> (1,0) -> (1,0.5) -> (0.5,1) -> (0,1)
                            -----
                            |
                            |         |
                            |         |
                            -----------
    """

    if C!=0:
        raise NotImplementedError("High order pentagonal shape functions are not available")

    N = np.array([  (e1-1.)*(e2-1.)*(2*e1+2*e2-3)/(2*e1+2*e2-e1*e2-3.),
                    -e1*(e2-1.)*(2*e1+2*e2-3)/(2*e1+2*e2-e1*e2-3.),
                    2.*e1*e2*(e2-1)/(2*e1+2*e2-e1*e2-3.),
                    2.*e1*e2*(e1-1)/(2*e1+2*e2-e1*e2-3.),
                    -e2*(e1-1.)*(2*e1+2*e2-3)/(2*e1+2*e2-e1*e2-3.),
        ])

    dN = np.array([
        [(e2 - 1.0)*((e1 - 1.0)*(e2 - 2)*(2*e1 + 2*e2 - 3) + (-4*e1 - 2*e2 + 5.0)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2,
         (e1 - 1.0)*((e1 - 2)*(e2 - 1.0)*(2*e1 + 2*e2 - 3) + (-2*e1 - 4*e2 + 5.0)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2],

        [(e2 - 1.0)*(-e1*(e2 - 2)*(2*e1 + 2*e2 - 3) + (4*e1 + 2*e2 - 3)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2 ,
         e1*(-(e1 - 2)*(e2 - 1.0)*(2*e1 + 2*e2 - 3) + (2*e1 + 4*e2 - 5.0)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2],

        [2.0*e2*(e2 - 1)*(-e1*e2 + e1*(e2 - 2) + 2*e1 + 2*e2 - 3.0)/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2,
         2.0*e1*(e2*(e1 - 2)*(e2 - 1) + (-2*e2 + 1)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2],

        [2.0*e2*(e1*(e1 - 1)*(e2 - 2) + (-2*e1 + 1)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2 ,
         2.0*e1*(e1 - 1)*(-e1*e2 + 2*e1 + e2*(e1 - 2) + 2*e2 - 3.0)/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2],

        [e2*(-(e1 - 1.0)*(e2 - 2)*(2*e1 + 2*e2 - 3) + (4*e1 + 2*e2 - 5.0)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2 ,
         (e1 - 1.0)*(-e2*(e1 - 2)*(2*e1 + 2*e2 - 3) + (2*e1 + 4*e2 - 3)*(e1*e2 - 2*e1 - 2*e2 + 3.0))/(e1*e2 - 2*e1 - 2*e2 + 3.0)**2]
        ])

    return N, dN
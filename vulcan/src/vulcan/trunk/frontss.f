      SUBROUTINE FRONTSS(DISIT,IDSK2,IDSK3,IFFIX,IPASS,LNODS,KRESL,
     .                   NDOFN,NELEM,NEVAB,NNODE,NPOIN,KPORE,ELOAD,
     .                   EQRHS,EQUAT,GLOAD,GSTIF,LOCEL,NACVA,NAMEV,
     .                   NDEST,NPIVO,VECRV,CSTIF,EQCOL,KSYMM,
     .                   NPREL,NGRUP,NPROP,NMATS,
     .                 NDATA,NPREV,NSTAT,NMATX,NTOTV,NDIME,NTOTVM,NFPCH,
     .                   MATNO,PROEL,PROPS,ELDAT,ELPRE,
     .                   ELVAR,ELMAT,WORK1,DISTO,COORD,
     .                   ADVEL,TEMPI,PREAS,TGAPS,DISPL,FPCHA)
C***********************************************************************
C
C**** THIS ROUTINE UNDERTAKES EQUATION SOLUTION BY THE FRONTAL
C     METHOD
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
C**** ADDITIONAL PARAMETERS
C
      INCLUDE 'addi_oms.f'
C
C**** MICROSTRUCTURAL VARIABLES
C
      INCLUDE 'auxl_oms.f'
C
c     CHARACTER*80  CAT,CBT,CCT,CDT,CET,CFT,CGT,CHT,CIT,CJT,CKT,CLT,
c    .              CMT,CNT,COT,CPT,CQT,CRT,CST,
c    .              CA1T,CB1T,CC1T,CD1T,CE1T,CF1T,
c    .              C1T,C2T,C3T,C4T,C5T,C6T,C7T,C8T,C9T,C10T
C
c     COMMON/NAMETA/CAT,CBT,CCT,CDT,CET,CFT,CGT,CHT,CIT,CJT,CKT,CLT,
c    .              CMT,CNT,COT,CPT,CQT,CRT,CST,
c    .              CA1T,CB1T,CC1T,CD1T,CE1T,CF1T,
c    .              C1T,C2T,C3T,C4T,C5T,C6T,C7T,C8T,C9T,C10T
      CHARACTER*80  CBS,CDS,CES,CFS,CGS,CJS,
     .              C1S
C
      COMMON/NAMESA/CBS,CDS,CES,CFS,CGS,CJS,
     .              C1S
C
c     COMMON/LOGUNT/LUDTST,LUSOLT,LUFROT,LUFRHT,LUDATT,LUPRIT,LUREST,
c    .              LUSO2T,LUFR2T,LUPOST,LURSTT,LUBFGT,LUPIPT,LUPANT,
c    .              LUGEOT,LUSETT,LUMATT,LUINIT,LULOAT,LUFIXT,LUADVT,
c    .              LUACTS,LUFANS,
c    .              LUCU1T,LUCU2T,LUCU3T,LUCU4T,LUCU5T,LUCU6T,LUCU7T,
c    .              LUCU8T,LUCU9T,LUC10T
      COMMON/LOGUNS/LUSOLS,LUFRHS,LUDATS,LUPRIS,LURESS,LUPOSS,
     .              LUCU1S
C
      DIMENSION DISIT(*), ELOAD(*), IFFIX(*), LNODS(NNODE,*)
      DIMENSION EQRHS(*), EQUAT(*), GLOAD(*), GSTIF(*),
     .          LOCEL(*), NACVA(*), NAMEV(*), NDEST(*),
     .          NPIVO(*), VECRV(*), CSTIF(*), EQCOL(*)
C
      DIMENSION MATNO(NELEM),
     .          PROEL(NPREL,NGRUP), PROPS(NPROP,NMATS),
     .          ELDAT(NDATA),       ELPRE(NPREV),
     .          ELVAR(NSTAT),       ELMAT(NMATX)
      DIMENSION DISTO(NTOTV,3),     COORD(NDIME,NPOIN)
      DIMENSION ADVEL(NTOTV*NDIME), TEMPI(NPOIN,2)
      DIMENSION PREAS(NPOIN),       TGAPS(NPOIN)
      DIMENSION DISPL(NTOTVM),      FPCHA(NFPCH,NPOIN)
C
      CHARACTER*10 PEPE
C
C**** REWIND TAPE
C
      REWIND LUFRHS
C
C**** READ MAXIMUM SIZE OF FRONT
C
      READ(LUFRHS) NBUFA,NFRON,NSTIF
C
C**** START BY INITIALIZING EVERYTHING THAT MATTERS TO ZERO
C
      DO 10 IBUFA=1,NBUFA
   10 EQRHS(IBUFA)=0.0
      DO 20 ISTIX=1,NSTIF
   20 GSTIF(ISTIX)=0.0
      DO 30 IFRON=1,NFRON
      GLOAD(IFRON)=0.0
   30 VECRV(IFRON)=0.0
      DO 40 INDEX=1,NBUFA*NFRON
      IF(KSYMM.EQ.0) EQCOL(INDEX)=0.0
   40 EQUAT(INDEX)=0.0
C
C**** AND PREPARE FOR DISC READING AND WRITING OPERATIONS
C
C     UNSYMMETRIC CASE (KSYMM=0)
C     LREC2=DIMENSIONS OF: EQUAT(NFRON,NBUFA), EQCOL(NFRON,NBUFA),
C                          EQRHS(NBUFA), NPIVO(NBUFA) & NAMEV(NBUFA)
C
C     SYMMETRIC CASE (KSYMM=1)
C     LREC2=DIMENSIONS OF: EQUAT(NFRON,NBUFA),
C                          EQRHS(NBUFA), NPIVO(NBUFA) & NAMEV(NBUFA)
C
C     LREC3=DIMENSIONS OF: EQRHS(NBUFA)
C
      GO TO (101,102,102,101,101,106,101,101), NMACHIS
C
  101 CONTINUE
      IF(KSYMM.EQ.0) THEN
       LREC2=NBUFA*(4*NFRON+4)*4
      ELSE
       LREC2=NBUFA*(2*NFRON+4)*4
      ENDIF
      LREC3=2*NBUFA*4
      GO TO 1000
C
  102 CONTINUE
      IF(KSYMM.EQ.0) THEN
       LREC2=NBUFA*(4*NFRON+4)
      ELSE
       LREC2=NBUFA*(2*NFRON+4)
      ENDIF
      LREC3=2*NBUFA
      GO TO 1000
C
  106 CONTINUE
      IF(KSYMM.EQ.0) THEN
       LREC2=NBUFA*(2*NFRON+3)*2
      ELSE
       LREC2=NBUFA*(NFRON+3)*2
      ENDIF
      LREC3=2*NBUFA
      GO TO 1000
C
 1000 CONTINUE
C
C**** OPEN SOLUTION FILES (.sol & .fro)
C
      OPEN(UNIT=IDSK2,FILE=CBS,STATUS='UNKNOWN',ACCESS='DIRECT',
     .     FORM='UNFORMATTED',RECL=LREC2)
C
      IF(KRESL.NE.1) THEN
       call runends('unit=ccs not implemented - frontss')
c      OPEN(UNIT=IDSK3,FILE=CCS,STATUS='UNKNOWN',ACCESS='DIRECT',
c    .      FORM='UNFORMATTED',RECL=LREC3)
      ENDIF
C
      NREC2=0
      NREC3=0
      INQUIRE(UNIT=IDSK2,ACCESS=PEPE)
C
C**** ENTER MAIN ELEMENT ASSEMBLY-REDUCTION LOOP
C
      KELVA=0
      NBUFE=0
      IF(KRESL.EQ.0) NBUFE=NBUFA
C
      DO 100 IELEMS=1,NELEM   ! ielems appears in auxl_oms.f
C
C**** IDENTIFY THE DESTINATION OF THE CURRENT ELEMENTAL EQUATION INTO
C     FRONT
C
      CALL FROTAPS(KFRON,LOCEL,NACVA,NDEST,NEVAB,NFRON)
      INQUIRE(UNIT=IDSK2,ACCESS=PEPE)
C
C**** ASSEMBLE THE CURRENT ELEMENT STIFFNESS MATRIX INTO THE GLOBAL
C     STIFFNESS ARRAY
C
      IF(KRESL.EQ.1)
     . CALL FROASSS(CSTIF,GLOAD,GSTIF,NDEST,NEVAB,NFRON,NSTIF,KSYMM,
     .              NELEM,NNODE,NPREL,NGRUP,NPROP,NMATS,
     .           NDATA,NPREV,NSTAT,NMATX,NTOTV,NPOIN,NDIME,NTOTVM,NFPCH,
     .              MATNO,LNODS,PROEL,PROPS,ELDAT,ELPRE,
     .              ELVAR,ELMAT,WORK1,DISTO,COORD,DISIT,
     .              ADVEL,TEMPI,PREAS,TGAPS,DISPL,FPCHA)
C
C**** RE-EXAMINE EACH ELEMENT NODE, TO ENQUIRE WHICH CAN BE ELIMINATED
C
      CALL FROELIS(DISIT,ELOAD, EQRHS,EQUAT,GLOAD,GSTIF,IDSK2,
     .             IDSK3,IELEMS,IFFIX,KELVA,KFRON,KPORE,KRESL,
     .             NDOFN,NELEM, NEVAB,NNODE,LOCEL,NACVA,NAMEV,
     .             NBUFA,NBUFE, NDEST,NFRON,NPIVO,NREC2,NREC3,
     .             NSTIF,KSYMM, EQCOL)
C
  100 CONTINUE
C
C**** BACK-SUBTITUTION
C
      CALL FROBAK(DISIT,ELOAD,EQRHS,EQUAT,IDSK2,IDSK3,IFFIX,
     .            IPASS,KELVA,KRESL,NBUFA,NBUFE,NFRON,NAMEV,
     .            NPIVO,NREC2,NREC3,NSTIF,VECRV,EQCOL,KSYMM)
C
      CLOSE(UNIT=IDSK2,STATUS='KEEP')
c     CLOSE(UNIT=IDSK3,STATUS='KEEP')
C
      RETURN
      END

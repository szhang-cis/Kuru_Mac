      SUBROUTINE STIF04B(PROPS,ESTIF,TENOD,ELDIS,ELCOD,DISPL,VNORL)
C***********************************************************************
C
C**** THIS ROUTINE COMPUTES THE STIFFNESS MATRIX FOR THE NODAL GAP 
C     ELEMENT NO. 4
C
C     AUGMENTED LAGRANGIAN METHOD (ALM): VERSIONS 0 & 1
C
C**** PROPERTIES FOR THE CONTACT PROBLEM
C
C     PROPS(2)=RIGIN            : NORNAL STIFFNESS
C     PROPS(3)=IMODEL           : CONTACT MODEL
C     PROPS(4)=IMODEX           : CONTACT MODEL FOR REGULARIZATION
C     PROPS(5)=TEMPL            : LIQUIDUS TEMPERATURE
C     PROPS(6)=INOTE            : DENOTES WHICH NODE BELONGS TO PIECE
C
C
C     REGULARIZATION OF CONTACT JACOBIAN MATRIX: 3 FORMS
C
C     Note: if two or more forms are input, the one with higher
C           numbering will be considered
C
C     1) JACOBIAN_REGULARIZATION_FACTORS (DEFINED FOR EACH CONTACT SET
C        FOR THE WHOLE ANALYSIS)
C
C        PROPS(10)=INP10: INDEX FOR JACOBIAN REGULARIZATION FACTORS
C
C        READS: TRUPL, TRUPM, NNN20
C
C        PROPS(11)=TRUPL: FIRST JACOB. REGULAR. FACTOR
C        PROPS(12)=TRUPM: SECOND JACOB. REGULAR. FACTOR
C        PROPS(13)=NNN20: DO LOOP INDEX
C
C        IITEF=10
C        TOLGA=-1.0E-08
C
C
C     2) TUNING_PARAMETERS (DEFINED FOR EACH CONTACT SET AND THEY CAN 
C        BE INPUT AT MATERIAL PROPERTIES AND/OR INTERVAL DATA LEVEL)
C
C        IITEN: INDEX FOR TUNING PARAMETERS
C
C        READS: IITEF, TRUPL, TRUPM, TOLGA (COMING FROM A COMMON OF
C               TUNING PARAMETERS)
C
C        IITEF: ITERATION FROM WHICH TRUPL ACTS
C        TRUPL: FIRST JACOB. REGULAR. FACTOR
C        TRUPM: SECOND JACOB. REGULAR. FACTO
C        TOLGA: CONTACT ADMISIBLE GAP
C
C        NNN20=20
C
C
C     3) CONTACT_CONTROL_FACTORS (THE SAME FOR ALL CONTACT SETS AND
C        THEY HAVE TO BE DEFINED FOR EVERY TIME STEP)
C
C        ICONC: CONTACT CONTROL INDEX
C
C        READS: TRUPL, TRUPM
C
C        TRUPL: FIRST JACOB. REGULAR. FACTOR
C        TRUPM: SECOND JACOB. REGULAR. FACTOR
C
C        IITEF=10
C        TOLGA=-1.0E-08
C        NNN20=20
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      INCLUDE 'prob_om.f'
      INCLUDE 'inte_om.f'
      INCLUDE 'auxl_om.f'
      INCLUDE 'inpo_om.f'
C
      COMMON/TUNING4/RITEN,RITEF,TRUPL,TRUPM,TOLGA,TOLGAM
C
      DIMENSION PROPS(NPROP),       ESTIF(NKOVA)
      DIMENSION TENOD(NNODL)
      DIMENSION ELDIS(NDOFN,NNODL), ELCOD(NDIME,NNODL)
      DIMENSION DISPL(NDOFN,*),     VNORL(NDIME,NNODL)
      DIMENSION AUXS1(3,3),         AUXS2(9,9),
     .          VERSO(3)
      DIMENSION RIGIN(3)
      DIMENSION RIGIX(3)
      DIMENSION RIGIY(3)
      DIMENSION RIGIZ(3)
C
      DO IDOFN=1,NDOFN
       RIGIN(IDOFN)=PROPS(2)
       RIGIX(IDOFN)=1.0                    ! displacements-contact force
       RIGIY(IDOFN)=RIGIN(IDOFN)           ! displacements-displacements
       RIGIZ(IDOFN)=RIGIN(IDOFN)           ! contact force-contact force
      ENDDO
      IMODEL=INT(PROPS(3))  ! 0: symmetric matrix; 1: unsymmetric matrix
      IMODEX=INT(PROPS(4))  ! 0: regularization 1; 1: regularization 2
      TEMPL=PROPS(5)
      INOTE=INT(PROPS(6))
      IITEN=INT(RITEN)      ! 0: tun. not considered; 1: tun. considered
      IITEF=INT(RITEF)
C
C**** DEFINES JACOBIAN REGULARIZATION FACTORS
C
      NNN20=20
      IF(ICONC.EQ.0) THEN
       IF(IITEN.EQ.0) THEN
        INP10=INT(PROPS(10))
        IF(INP10.EQ.1) THEN
         IITEF=10
         TRUPL=PROPS(11)
         TRUPM=PROPS(12)
         if(imodex.eq.1) then
          IF(TRUPL.LT.10.E-06) TRUPL=10.E-06
          TRUPM=TRUPL
          CALL RUNMEN('WARNING: TRUPL & TRUPM ARE SET TO 10.E-06')
         endif
         NNN20=INT(PROPS(13))
         TOLGA=-1.0E-08
        ENDIF
       ENDIF
      ELSE
       IITEF=10
       TOLGA=-1.0E-08
      ENDIF
C
C**** OUTWARD UNIT NORMAL TO BODY 1
C
      TOLNOR=-1.0E-08       ! to avoid unrealistic situations
      VNORC=0.0
      DO IDIME=1,NDIME
       VNORA=VNORL(IDIME,1)*VNORL(IDIME,2)
       IF(VNORA.GT.TOLNOR) VNORL(IDIME,1)=0.0
       VNORA=VNORL(IDIME,1)
       VNORC=VNORC+VNORA*VNORA
      ENDDO
      VNORC=DSQRT(VNORC)
      DO IDIME=1,NDIME
       VNORA=VNORL(IDIME,1)
       VERSO(IDIME)=VNORA/VNORC
      ENDDO
C
C**** INITIALISES AUXS1 & A PART OF AUXS2
C
      DO IDOFN=1,NDOFN
       DO JDOFN=1,NDOFN
        AUXS1(IDOFN,JDOFN)=0.0
       ENDDO
      ENDDO
      DO IDOFN=1,NDOFN*3
       DO JDOFN=1,NDOFN*3
        AUXS2(IDOFN,JDOFN)=0.0
       ENDDO
      ENDDO
C
C**** COMPUTES CONTACT RIGIDITY
C
      IF(TENOD(INOTE).LT.TEMPL) THEN
       DO IDOFN=1,NDOFN
C
C**** COMPUTES GAP FOR NDIME DIRECTIONS AT THE LAST CONVERGED STEP
C
        PROYE=VERSO(IDOFN)
        ELDI1=ELDIS(IDOFN,1)-DISPL(IDOFN,1)
        ELDI2=ELDIS(IDOFN,2)-DISPL(IDOFN,2)
        DGAPA=PROYE*(ELDI1-ELDI2)
C
C**** COMPUTES GAP FOR NDIME DIRECTIONS AT THE CURRENT STEP
C
        ELDI1=ELDIS(IDOFN,1)
        ELDI2=ELDIS(IDOFN,2)
        DGAPB=PROYE*(ELDI1-ELDI2)
C
C**** COMPUTES NORMAL PRESSURE
C
        PRESN=ELDIS(IDOFN,3)
C
C**** "STABILIZED" CONTACT RIGIDITY
C
        IF(IAUGM.EQ.0) THEN
         IF(DGAPA.LE.TOLGA.AND.DGAPB.LE.0.0) THEN
          if(imodex.eq.0) then
           RIGIX(IDOFN)=RIGIX(IDOFN)*TRUPM
           RIGIY(IDOFN)=RIGIY(IDOFN)*TRUPM        ! not used
          else
           RIGIZ(IDOFN)=RIGIZ(IDOFN)*TRUPM
          endif
         ENDIF
        ENDIF
C
C**** "IMPROVED" CONTACT RIGIDITY
C
        IF(DGAPB.LE.0.0.OR.PRESN.GT.0.0) THEN
         DO III20=1,NNN20
          IF(IITER.GT.(III20*IITEF)) THEN
           if(imodex.eq.0) then
            RIGIX(IDOFN)=RIGIX(IDOFN)*TRUPL
            RIGIY(IDOFN)=RIGIY(IDOFN)*TRUPL       ! not used
           else
            RIGIZ(IDOFN)=RIGIZ(IDOFN)*TRUPL
           endif
          ENDIF
         ENDDO
        ENDIF
C
       END DO     !idofn=1,ndofn
      ENDIF
C
C**** COMPUTES ONLY A FORTH PART OF ELEMENTAL CONTACT MATRIX
C     (RELATES TO: DISPLACEMENTS-CONTACT FORCE)
C
      DO IDOFN=1,NDOFN
       PROYE=VERSO(IDOFN)
       DO JDOFN=1,NDOFN
        IF(IDOFN.EQ.JDOFN)
     .   AUXS1(IDOFN,JDOFN)=AUXS1(IDOFN,JDOFN)+PROYE*RIGIX(IDOFN)
       ENDDO
      ENDDO
C
C**** ELEMENTAL CONTACT MATRIX
C     (RELATES TO: DISPLACEMENTS-CONTACT FORCE)
C
      DO IDOFN=1,NDOFN
       DO JDOFN=1,NDOFN
        if(imodel.eq.0) then
         AUXS2(IDOFN,JDOFN+2*NDOFN)=-AUXS1(IDOFN,JDOFN)
         AUXS2(IDOFN+NDOFN,JDOFN+2*NDOFN)=AUXS1(IDOFN,JDOFN)
        else
         AUXS2(IDOFN,JDOFN+2*NDOFN)=-AUXS1(IDOFN,JDOFN)
         AUXS2(IDOFN+NDOFN,JDOFN+2*NDOFN)=AUXS1(IDOFN,JDOFN)
         AUXS2(IDOFN+2*NDOFN,JDOFN)=AUXS1(IDOFN,JDOFN)
         AUXS2(IDOFN+2*NDOFN,JDOFN+NDOFN)=-AUXS1(IDOFN,JDOFN)
        endif
       ENDDO
      ENDDO
C
C**** ELEMENTAL CONTACT MATRIX
C     (RELATES TO: CONTACT FORCE-CONTACT FORCE)
C
      DO IDOFN=1,NDOFN
       DO JDOFN=IDOFN,NDOFN
        if(imodel.eq.0) then
         IF(IDOFN.EQ.JDOFN)
     .    AUXS2(IDOFN+2*NDOFN,JDOFN+2*NDOFN)=-1.0/RIGIZ(IDOFN)
        else
         IF(IDOFN.EQ.JDOFN)
     .    AUXS2(IDOFN+2*NDOFN,JDOFN+2*NDOFN)=1.0/RIGIZ(IDOFN)
        endif
       ENDDO
      ENDDO
C
C**** EVALUATE ELEMENT CONTRIBUTION
C
      if(imodel.eq.0) then
       DO IEVAB=1,NDOFN*3
        DO JEVAB=IEVAB,NDOFN*3
         ICONB=(2*NEVAB-IEVAB)*(IEVAB-1)/2+JEVAB
         IF(KSYMM.EQ.0) ICONB=(IEVAB-1)*NEVAB+JEVAB  ! unsymmetric
         ESTIF(ICONB)=AUXS2(IEVAB,JEVAB)
        ENDDO
       ENDDO
C
C**** LOAD ESTIF IN A SQUARE FORM FOR UNSYMMETRIC SOLVER
C
       IF(KSYMM.EQ.0) THEN
        DO IEVAB=1,NEVAB
         DO JEVAB=IEVAB,NEVAB
          KLOCS=(IEVAB-1)*NEVAB+JEVAB
          KLOCI=(JEVAB-1)*NEVAB+IEVAB
          ESTIF(KLOCI)=ESTIF(KLOCS)
         END DO
        END DO
       END IF
      else
       ICONB=0
       DO IEVAB=1,NEVAB
        DO JEVAB=1,NEVAB
         ICONB=ICONB+1
         IF(IEVAB.LE.(3*NDOFN).AND.JEVAB.LE.(3*NDOFN)) THEN
          ESTIF(ICONB)=AUXS2(IEVAB,JEVAB)
         ELSE
          ESTIF(ICONB)=0.0
         ENDIF
        ENDDO
       ENDDO
      endif
C
      RETURN
      END

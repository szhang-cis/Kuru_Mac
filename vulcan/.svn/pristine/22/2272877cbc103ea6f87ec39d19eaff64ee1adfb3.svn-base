      SUBROUTINE FRIN31(ELDIS,PROPS,BMSIG,TENOD,EHIST,ELCOD,PWOEL,DISPC,
     .                  PREAL,TGAPL)
C***********************************************************************
C
C**** THIS ROUTINE EVALUATES THE RESISTING FORCES OF THE
C     CONTACT-FRICTION
C     ELEMENT ( NO. 31 )
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
C**** COUPLING VARIABLES
C
      INCLUDE 'nuec_om.f'
C
C**** MECHANICAL VARIABLES
C
      INCLUDE 'prob_om.f'
      INCLUDE 'inte_om.f'
      INCLUDE 'auxl_om.f'
C
      DIMENSION ELDIS(NDOFN,NNODL), PROPS(NPROP),
     .          BMSIG(NDOFN*NNODL), TENOD(NNODL)
      DIMENSION EHIST(NHIST,*),     PWOEL(*),
     .          DISPC(*),           ELCOD(NDIME,NNODL)
      DIMENSION PREAL(*),           TGAPL(*)
C
      DIMENSION DGAPS(3),           DGAPI(3)
      DIMENSION VECTN(3,3),         COEFN(3),
     .          FUERZ(3),           DDSLI(3),
     .          SIGNO(3),           ELDII(3,2),
     .          DSLIP(3)
C
C     EHIST(1,1):     LAST CONVERGED HARDENING FUNCTION
C     EHIST(2,IDOFN): NORMAL AND TANGENTIAL(S) RIGIDITY MODULUS
C     EHIST(3,IDOFN): LAST CONVERGED TANGENTIAL(S) FORCE(S)
C     EHIST(4,IDOFN): LAST CONVERGED "PLASTIC TANGENTIAL(S) GAP(S)"
C
      TWOPI=6.283185307179586
C
C**** ASSIGN PROPERTIES
C
      IF(NDOFN.EQ.2) THEN
C
C     VECTN(1,1)= NX    VECTN(1,2)= NY
C     VECTN(2,1)= TX    VECTN(2,2)= TY
C
C     COEFN(1)= CN      COEFN(2)= CT
C
       VECTN(1,1)=PROPS(1)
       VECTN(1,2)=PROPS(2)
       VECTN(2,1)=PROPS(3)
       VECTN(2,2)=PROPS(4)
       COEFN(1)=PROPS(5)
       COEFN(2)=PROPS(6)
C
C     FRICT: FRICTION COEFFICIENT
C     INOTE: DENOTES WHICH NODE BELONGS TO PIECE
C     TEMPL: LIQUIDUS TEMPERATURE
C     PRENO: MAXIMUM VALUE OF "HARDENING FUNCTION" (FRICT * NORMAL
C     FORCE)
C
       FRICT=PROPS(7)
       INOTE=INT(PROPS(8))
       TEMPL=PROPS(9)
       PRENO=PROPS(10)
      ENDIF
C
C**** PARTICULAR TREATMENT FOR AXISYMMETRIC CASE
C
      IF(NTYPE.EQ.3) THEN
       IELCO=0
       IF(ELCOD(1,1).EQ.0.0) IELCO=1
      ENDIF
C
C**** INITIALISES "PLASTIC (TOTAL AND INCREMENTAL) TANGENTIAL(S) GAP(S)"
C
      DO IDOFN=2,NDOFN
       DSLIP(IDOFN)=EHIST(4,IDOFN)
       DDSLI(IDOFN)=0.0
      ENDDO
C
C**** INITIALISE MECHANICAL COUPLING TERM
C
      DO INODL=1,NNODL
       PWOEL(INODL)=0.0
      END DO
C
C**** ASSIGN DISPC(INCREMENTAL DISPLACEMENTS) TO ELDII
C     (USED IN INCREMENTAL INTEGRATION OF FRICTION THEORY)
C
      DO IDOFN=1,NDOFN
       I=IDOFN
       ELDII(IDOFN,1)=DISPC(I)
       J=IDOFN+NDOFN
       ELDII(IDOFN,2)=DISPC(J)
      ENDDO
C
C**** COMPUTE NORMAL AND TANGENTIAL(S) GAPS
C
      DO IDOFN=1,NDOFN
       DGAPS(IDOFN)=0.0
       DO JDOFN=1,NDOFN
        DGAPS(IDOFN)=DGAPS(IDOFN)+VECTN(IDOFN,JDOFN)*
     .               (ELDIS(JDOFN,2)-ELDIS(JDOFN,1))
       END DO
      END DO
C
C**** COMPUTE NORMAL AND TANGENTIAL(S) INCREMENTAL GAPS
C     (USED IN INCREMENTAL INTEGRATION OF FRICTION THEORY)
C
      DO IDOFN=1,NDOFN
       DGAPI(IDOFN)=0.0
       DO JDOFN=1,NDOFN
        DGAPI(IDOFN)=DGAPI(IDOFN)+VECTN(IDOFN,JDOFN)*
     .              (ELDII(JDOFN,2)-ELDII(JDOFN,1))
       END DO
      END DO
C
      IF(TENOD(INOTE).LT.TEMPL) THEN
C
C**** CONTACT + FRICTION
C
       IF(DGAPS(1).GT.0.0) THEN
C
C**** NORMAL FORCE EXISTS
C
        FUERZ(1)=COEFN(1)*DGAPS(1)
C
C**** COMPUTE TANGENTIAL(S) FORCE(S)
C
        DO IDOFN=2,NDOFN
C
C     (USED IN INCREMENTAL INTEGRATION OF FRICTION THEORY)
C         FUERZ(IDOFN)=EHIST(3,IDOFN)+COEFN(IDOFN)*DGAPI(IDOFN)
C
         FUERZ(IDOFN)=COEFN(IDOFN)*(DGAPS(IDOFN)-DSLIP(IDOFN))
         EHIST(3,IDOFN)=FUERZ(IDOFN)
        ENDDO
C
        EHIST(2,1)=COEFN(1)
        IF(NTYPE.EQ.3.AND.IELCO.EQ.0) EHIST(2,1)=TWOPI*ELCOD(1,1)*
     .                                           COEFN(1)
        DO IDOFN=2,NDOFN
         EHIST(2,IDOFN)=COEFN(IDOFN)
         IF(NTYPE.EQ.3.AND.IELCO.EQ.0) EHIST(2,IDOFN)=
     .                                 TWOPI*ELCOD(1,1)*COEFN(IDOFN)
        ENDDO
C
        IF(IITER.GT.0) THEN
C
C**** "PLASTIC" FRICTION
C
         FUMOD=0.0
         DO IDOFN=2,NDOFN
          FUMOD=FUMOD+FUERZ(IDOFN)*FUERZ(IDOFN)
         ENDDO
         TOLMO=1.0D-10
         IF(FUMOD.GT.TOLMO) THEN
          FUMOD=DSQRT(FUMOD)
         ELSE
          FUMOD=0.0
         ENDIF
C
C**** OPTIONS TO CONSIDER LAST HARDENING FUNCTION
C
C     LAST CONVERGED HARDENING FUNCTION
C         ENDUR=EHIST(1,1)
C         EHIST(1,1)=FRICT*COEFN(1)*DGAPS(1)
C
         ENDUR=FRICT*COEFN(1)*DGAPS(1)
         IF(ENDUR.GT.PRENO) ENDUR=PRENO
C
         YIELF=FUMOD-ENDUR
C
         IF(FUMOD.EQ.0.0) THEN
C
C**** PARTICULAR CASE
C
          DO IDOFN=2,NDOFN
           FUERZ(IDOFN)=0.0
          ENDDO
C
          DO IDOFN=2,NDOFN
           EHIST(2,IDOFN)=0.0
          ENDDO
         ENDIF
C
         IF(YIELF.GT.0.0) THEN
C
C**** SLIPS OCCURS
C
          ADENO=0.0
          DO IDOFN=2,NDOFN
           ADENO=ADENO+FUERZ(IDOFN)*FUERZ(IDOFN)*COEFN(IDOFN)/
     .          (FUMOD*FUMOD)
          ENDDO
          CLAMB=YIELF/ADENO
C
          DO IDOFN=2,NDOFN
           DDSLI(IDOFN)=CLAMB*FUERZ(IDOFN)/FUMOD
           DSLIP(IDOFN)=DSLIP(IDOFN)+DDSLI(IDOFN)
           EHIST(4,IDOFN)=DSLIP(IDOFN)
          ENDDO
C
          DO IDOFN=2,NDOFN
           SIGNO(IDOFN)=1.0
           IF(FUERZ(IDOFN).LT.0.0) SIGNO(IDOFN)=-1.0
           FUERZ(IDOFN)=ENDUR*SIGNO(IDOFN)
           EHIST(3,IDOFN)=FUERZ(IDOFN)
          ENDDO
C
          EHIST(2,1)=COEFN(1)
          IF(NTYPE.EQ.3.AND.IELCO.EQ.0) EHIST(2,1)=TWOPI*ELCOD(1,1)*
     .                                             COEFN(1)
          DO IDOFN=2,NDOFN
           EHIST(2,IDOFN)=0.0
          ENDDO
C
C**** MECHANICAL COUPLING TERM
C
          DO INODL=1,NNODL
           DO IDOFN=2,NDOFN
            DDSLI(IDOFN)=DDSLI(IDOFN)/DTIME
            PWOEL(INODL)=PWOEL(INODL)+FUERZ(IDOFN)*DDSLI(IDOFN)/COUFAC
           ENDDO
          ENDDO
C
         ENDIF     ! yield.gt.0.0
        ENDIF      ! iiter.gt.0
C
       ELSE
C
C**** ZERO OR NEGATIVE NORMAL GAP
C
        FUERZ(1)=0.0
        DO IDOFN=2,NDOFN
         FUERZ(IDOFN)=0.0
         EHIST(3,IDOFN)=0.0
        ENDDO
C
        EHIST(2,1)=0.0
        DO IDOFN=2,NDOFN
         EHIST(2,IDOFN)=0.0
        ENDDO
C
       ENDIF   ! dgaps(1).gt.0.0
C
      ELSE
C
C**** ONLY CONTACT
C
       FUERZ(1)=COEFN(1)*DGAPS(1)
       DO IDOFN=2,NDOFN
        FUERZ(IDOFN)=0.0
        EHIST(3,IDOFN)=0.0
       ENDDO
C
       EHIST(2,1)=COEFN(1)
       IF(NTYPE.EQ.3.AND.IELCO.EQ.0) EHIST(2,1)=TWOPI*ELCOD(1,1)*
     .                                          COEFN(1)
       DO IDOFN=2,NDOFN
        EHIST(2,IDOFN)=0.0
       ENDDO
C
      ENDIF      ! tenod.lt.templ
C
C**** EVALUATE NODAL FORCES FOR THE AXISYMMETRIC CASE
C
      IF(NTYPE.EQ.3.AND.IELCO.EQ.0) THEN
       FUERZ(1)=TWOPI*ELCOD(1,1)*FUERZ(1)
       DO IDOFN=2,NDOFN
        FUERZ(IDOFN)=TWOPI*ELCOD(1,1)*FUERZ(IDOFN)
       ENDDO
       DO INODL=1,NNODL
        PWOEL(INODL)=TWOPI*ELCOD(1,1)*PWOEL(INODL)
       ENDDO
      ENDIF
C
C**** ASSIGN NORMAL FORCE AND GAP (TO BE CONSIDERED INTO THE THERMAL
C     PROBLEM)
C
      DO INODL=1,NNODL
       PREAL(INODL)=FUERZ(1)
       IF(DGAPS(1).LT.0.0) DGAPS(1)=-DGAPS(1)
       TGAPL(INODL)=DGAPS(1)
      ENDDO
C
C***EVALUATE ELEMENT CONTRIBUTION
C
      DO IDOFN=1,NDOFN
       DO JDOFN=1,NDOFN
        BMSIG(IDOFN)=BMSIG(IDOFN)-VECTN(JDOFN,IDOFN)*FUERZ(JDOFN)
        BMSIG(IDOFN+NDOFN)=BMSIG(IDOFN+NDOFN)+VECTN(JDOFN,IDOFN)*
     .                     FUERZ(JDOFN)
       END DO
      END DO
C
      RETURN
      END

      SUBROUTINE STIF04C(PROPS,ESTIF,TENOD,ELDIS,ELCOD,DISPL,VNORL)
C***********************************************************************
C
C**** THIS ROUTINE COMPUTES THE STIFFNESS MATRIX FOR THE NODAL GAP 
C     ELEMENT NO. 4
C
C     AUGMENTED LAGRANGIAN METHOD (ALM): VERSION 2 (Cante's thesis)
C
C**** PROPERTIES FOR THE CONTACT PROBLEM
C
C     PROPS(2)=RIGIN            : NORNAL STIFFNESS
C     PROPS(3)=IMODEL           : CONTACT MODEL
C     PROPS(5)=TEMPL            : LIQUIDUS TEMPERATURE
C     PROPS(6)=INOTE            : DENOTES WHICH NODE BELONGS TO PIECE
C
C**** STABILIZATION PARAMETERS (CONTROL AT MATERIAL PROPERTIES AND/OR
C     INTERVAL DATA LEVEL) COMING FROM A COMMON OF TUNING PARAMETERS
C
C     IITEF                     : ITERATION FROM WHICH TRUPL ACTS
C     TRUPL                     : FIRST STIFFNESS IN TENSION
C     TRUPM                     : SECOND STIFFNESS IN TENSION
C
C***********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      INCLUDE 'prob_om.f'
      INCLUDE 'inte_om.f'
      INCLUDE 'auxl_om.f'
      INCLUDE 'inpo_om.f'
C
      COMMON/TUNING4/RITEN,RITEF,TRUPL,TRUPM,TOLGA,TOLGAM
C
      DIMENSION PROPS(NPROP),       ESTIF(NKOVA)
      DIMENSION TENOD(NNODL)
      DIMENSION ELDIS(NDOFN,NNODL), ELCOD(NDIME,NNODL)
      DIMENSION DISPL(NDOFN,*),     VNORL(NDIME,NNODL)
      DIMENSION AUXS1(3,3),         AUXS2(9,9),
     .          VERSO(3)
      DIMENSION RIGIN(3)
      DIMENSION RIGIY(3)
C
      DO IDOFN=1,NDOFN
       RIGIN(IDOFN)=PROPS(2)
       RIGIY(IDOFN)=RIGIN(IDOFN)           ! displacements-displacements
      ENDDO
      IMODEL=INT(PROPS(3))                 ! not used
      TEMPL=PROPS(5)
      TEMPM=PROPS(12)
      INOTE=INT(PROPS(6))
C
C**** IF "JACOBIAN_REGULARIZATION_FACTOR" IS USED, REDEFINES TUNING PAR.
C
      INP10=INT(PROPS(10))
      IF(INP10.EQ.1) THEN
       RITEF=10.0
       TRUPL=PROPS(11)
       TRUPM=0.0
       TOLGA=-1.0E-06                      ! not used
      ENDIF
C
C**** "BEST" TUNINGS
C
c      RITEF=0.0
c      TRUPL=0.0
c      TRUPM=0.0
c      TOLGA=-1.0E-06                       ! not used
C
      IITEF=INT(RITEF)
C
C**** OUTWARD UNIT NORMAL TO BODY 1
C
      TOLNOR=-1.0E-08
      VNORC=0.0
      DO IDIME=1,NDIME
       VNORA=VNORL(IDIME,1)*VNORL(IDIME,2)
       IF(VNORA.GT.TOLNOR) VNORL(IDIME,1)=0.0
       VNORA=VNORL(IDIME,1)
       VNORC=VNORC+VNORA*VNORA
      ENDDO
      VNORC=DSQRT(VNORC)
      DO IDIME=1,NDIME
       VNORA=VNORL(IDIME,1)
       VERSO(IDIME)=VNORA/VNORC
      ENDDO
C
C**** INITIALISES AUXS1 & A PART OF AUXS2
C
      DO IDOFN=1,NDOFN
       DO JDOFN=1,NDOFN
        AUXS1(IDOFN,JDOFN)=0.0
       ENDDO
      ENDDO
      DO IDOFN=1,NDOFN*3
       DO JDOFN=1,NDOFN*3
        AUXS2(IDOFN,JDOFN)=0.0
       ENDDO
      ENDDO
C
C**** COMPUTES CONTACT RIGIDITY
C
      if(iprco.eq.1) iitef=1
      IF(TENOD(INOTE).LT.TEMPL) THEN
       DO IDOFN=1,NDOFN
C
C**** COMPUTES GAP FOR NDIME DIRECTIONS AT THE LAST CONVERGED STEP
C
        PROYE=VERSO(IDOFN)
        ELDI1=ELDIS(IDOFN,1)-DISPL(IDOFN,1)
        ELDI2=ELDIS(IDOFN,2)-DISPL(IDOFN,2)
        DGAPA=PROYE*(ELDI1-ELDI2)
C
C**** COMPUTES GAP FOR NDIME DIRECTIONS AT THE CURRENT STEP
C
        ELDI1=ELDIS(IDOFN,1)
        ELDI2=ELDIS(IDOFN,2)
        DGAPB=PROYE*(ELDI1-ELDI2)
C
C**** COMPUTES NORMAL PRESSURE
C
        PRESA=ELDIS(IDOFN,3)-DISPL(IDOFN,3)
        PRESB=ELDIS(IDOFN,3)
C
C**** "STABILIZED" CONTACT RIGIDITY
C
c        IF(PRESA.GT.0.0.AND.PRESB.GT.0.0) THEN
c         RIGIY(IDOFN)=RIGIY(IDOFN)*TRUPM
c        ENDIF
C
C**** "IMPROVED" CONTACT RIGIDITY
C
c        IF(PRESB.GT.0.0) THEN
        IF(PRESB.GE.tolga) THEN
         DO III20=1,20
          IF(IITER.GT.(III20*IITEF)) THEN
           RIGIY(IDOFN)=RIGIY(IDOFN)*TRUPL
          ENDIF
         ENDDO
        ENDIF
C
       END DO     !idofn=1,ndofn
      ENDIF
C
C**** MATRIX TO AVOID PROBLEMS WHEN USING PCG ITERATIVE SOLVER
C
      DO IDOFN=1,NDOFN
       DO JDOFN=IDOFN,NDOFN
        IF(IDOFN.EQ.JDOFN) AUXS2(IDOFN+2*NDOFN,JDOFN+2*NDOFN)=1.0
       ENDDO
      ENDDO
C
C**** COMPUTE ONLY A FORTH (SYMMETRIC) PART OF ELEMENTAL CONTACT MATRIX
C     (RELATES TO: DISPLACEMENTS-DISPLACEMENTS)
C
      DO IDOFN=1,NDOFN
       PROYE=VERSO(IDOFN)
       DO JDOFN=IDOFN,NDOFN
        IF(IDOFN.EQ.JDOFN) 
     .   AUXS1(IDOFN,JDOFN)=AUXS1(IDOFN,JDOFN)+RIGIY(IDOFN)*PROYE*PROYE
       ENDDO
      ENDDO
C
C**** ELEMENTAL CONTACT MATRIX (SYMMETRIC)
C     (RELATES TO: DISPLACEMENTS-DISPLACEMENTS)
C
      DO IDOFN=1,NDOFN
       DO JDOFN=IDOFN,NDOFN
        AUXS2(IDOFN,JDOFN)=AUXS1(IDOFN,JDOFN)
        AUXS2(IDOFN,JDOFN+NDOFN)=-AUXS1(IDOFN,JDOFN)
        AUXS2(JDOFN,IDOFN+NDOFN)=-AUXS1(IDOFN,JDOFN)
        AUXS2(IDOFN+NDOFN,JDOFN+NDOFN)=AUXS1(IDOFN,JDOFN)
       ENDDO
      ENDDO
C
C**** EVALUATE ELEMENT CONTRIBUTION
C
      DO IEVAB=1,NDOFN*3
       DO JEVAB=IEVAB,NDOFN*3
        ICONB=(2*NEVAB-IEVAB)*(IEVAB-1)/2+JEVAB
        IF(KSYMM.EQ.0) ICONB=(IEVAB-1)*NEVAB+JEVAB  ! unsymmetric
        ESTIF(ICONB)=AUXS2(IEVAB,JEVAB)
       ENDDO
      ENDDO
C
C**** LOAD ESTIF IN A SQUARE FORM FOR UNSYMMETRIC SOLVER
C
      IF(KSYMM.EQ.0) THEN
       DO IEVAB=1,NEVAB
        DO JEVAB=IEVAB,NEVAB
         KLOCS=(IEVAB-1)*NEVAB+JEVAB
         KLOCI=(JEVAB-1)*NEVAB+IEVAB
         ESTIF(KLOCI)=ESTIF(KLOCS)
        END DO
       END DO
      END IF
C
      RETURN
      END
